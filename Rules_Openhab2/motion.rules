var Timer md1Timer = null
val int timeoutMinutes = 5 // choose an appropriate value

rule "MotionDetector1 received ON"
when
    Item MotionDetector1 received command ON
then
    if(md1Timer == null) {
        md1Timer = createTimer(now.plusMinutes(timeoutMinutes ), [|
            MotionDetector1.sendCommand(OFF)
            md1Timer = null
        ])
    }
    else {
        md1Timer.reschedule(now.plusMinutes(timeoutMinutes )
    }
end

/*  Two Motion Sensors */
import java.util.Map

val Map<String, Timer> timers = newHashMap

rule "A Motion Detector triggered"
when
    Item MotionDetector1 received command ON or
    Item MotionDetector2 received command ON
then
    Thread::sleep(100) // give persistence time to save the update
    val sw =  gMotionDetectors.members.sortBy[lastUpdate].last as SwitchItem

    val timeoutMinutes = 5 // use an appropriate value

    if(timers.get(sw.name) == null){
        timers.put(sw.name, createTimer(now.plusMinutes(timeOutMinutes), [|
            sw.sendCommand(OFF)
            timers.put(sw.name, null)
        ]))
    }
    else {
        timers.get(sw.name).reschedule(now.plusMinutes(timeOutMinutes))
    }
end